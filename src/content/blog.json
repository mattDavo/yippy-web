[
    {
        "id": 0,
        "title": "First Post!",
        "content": "Goals for working on Yippy:\n- Learn and use reactive programming\n- Use test driven development\n- Learn macOS development\n- Put out releases and act based on feedback\n- Build a great tool/app!\n- Learn the use of functional programming in a Swift + macOS environment",
        "date": 1565097487,
        "author": "Matt Davidson"
    },
    {
        "id": 1,
        "title": "Challenges with RxSwift",
        "content": "As a part of my learning experience in developing Yippy I have decided to learn reactive programming. As Yippy is being developed in Swift, I have chosen to use <code>RxSwift</code>. So I have started trying to implement the reactive programming patterns to Yippy. So far I have found it to be more difficult than I anticipated but I can tell that it is starting to make sense, and how I'm supposed to use and implement. I think it will continue to be a large learning curve but worthwhile.",
        "date": 1566882327,
        "author": "Matt Davidson"
    },
    {
        "id": 2,
        "title": "Improving the User Experience",
        "content": "To get users to test and receive helpful feedback I decided that I needed to improve the installation experience, as it wasn't clear why or how the user should provide full control to Yippy. Unfortunately due to macOSX this clunky step is necessary, so I need to try and make it as seemless for the user as possible. So I have added a step to prompt the user into providing the full control. Additionally I have added a help window that provides instructions on how to use Yippy once full control is given, until then the user is prompted to provide full access. Hopefully these steps will be enough in the short term to make the installation process simple.\n\nNow that I have added a fair amount of code complexity to the app, I have to dedicate some time to cleaning up the app. This will involve removing all warnings, making the code more readable, converting more code to use <code>RxSwift</code> and importantly write tests! I haven't done much testing, UI or otherwise in Swift so this will be a good opportunity to learn how the Xcode testing framework works. I think this is an important next step, so as I add more features to Yippy I can be sure that the original and future features work as expected.",
        "date": 1568347088,
        "author": "Matt Davidson"
    },
    {
        "id": 3,
        "title": "Wrangling with NSEvent monitoring",
        "content": "Unfortunately I wasted a lot of time trying to rewrite the key events to control the Yippy history window. After many hours and almost getting a much cleaner rewrite to work I discovered that I can’t use <code>NSEvent.addGlobalMonitorForEvents</code> and/or <code>NSEvent.addLocalMonitorForEvents</code> the way I want to due to the nature of the API and Yippy being an agent-only application. I originally had this working using the HotKey <insert link> library but did not like some of the unclean code I was using to turn it off and on again. However, it seems that I may have to use it, or write my own module which uses the (quite confusing) Carbon API like HotKey. It may just be best to use the HotKey library.\n\nHowever, I have managed to write some nice and useful code which could be re-used in future projects (that are not agent-only), so I may finish it off and put it into a separate repo.",
        "date": 1569051098,
        "author": "Matt Davidson"
    },
    {
        "id": 4,
        "title": "Not a total waste of time",
        "content": "I decided to try a few more things and was able to get it to work closer to how I imagined by forcing the app to activate and then returning the focus to the previous application. However this ended up making the code more confusing, and it removed some of the convenient functionality that I originally had using <code>HotKey</code>.\n\nHowever this is not all bad as I will be able to use it in other parts of the app where the window should be active.",
        "date": 1569137508,
        "author": "Matt Davidson"
    },
    {
        "id": 5,
        "title": "The Testing Experience",
        "content": "I’ve now cleaned the app up a lot by moving a lot of code into models, so that the controllers (and the app delegate) are not doing all of the work. There is still some more work to be done on this, really just for the Yippy history window and managing of the history state and any changes.\n\nHowever, this has been some good work and I have been able to start writing tests, learning how Xcode’s testing framework works. There are two components to Xcode’s testing framework: the unit testing side and the UI testing side. I decided to start with the unit tests as I thought it made the most sense. I’ve made a start by testing the basic stuff, such as the <code>Settings</code> structure, simple methods in my Cocoa extensions, my wrapper around <a href=\"https://github.com/soffes/HotKey\" target=\"_blank\">HotKey</a> and my pasteboard monitor which essentially make the up the core of Yippy. Yippy doesn’t actually have a very intensive user interface, it is mainly a lot of different event handling to provide the user an up-to-date record of their pasteboard and quick way for them to access it. This has really fit into this reactive style of programming.\n\nStarting with the unit testing framework, I started to get a better understanding of how I would do the testing and I also got a taste of the trickiness of how the UI testing would be for me. For the basic models, writing tests was easy, just using the <b>\"given, when, then\"</b> style of writing tests. However, for testing my <code>Settings</code> structure which persistently stores objects in the standard <code>UserDefaults</code> it would be a bit harder. Firstly, to prevent any flakiness we need the testing environment the same every time and secondly to avoid messing with my own installation of Yippy the tests should interact with their own user defaults. However, due to the way I’ve set up my <code>Settings</code> structure this would prove more difficult because the unit testing framework runs the tests with the same bundle identifier. This led me <a href=\"http://www.figure.ink/blog/2016/10/15/testing-userdefaults\" target=\"_blank\">this</a> blog post which allowed me to write my own functions to run tests under a clean environment every time, preserving my own Yippy settings.\n\nAs I moved to the UI testing, I slowly discovered how much harder it would be to run UI tests in a perfectly defined environment. This is because in the UITests the bundle identifier of the code in the tests is different to the bundle identifier of the instance of the app running (which makes sense). However, this means we don’t have the luxury of blanking persistent structures (like my <code>Settings</code>) within the tests. We have to provide launch arguments to the app and within our app detect these arguments and set up the state accordingly. This doesn’t sound too hard right? Well, sort of... It’s not too difficult define our own state for things such as the settings, on launch save the original settings, load the test ones and on termination restore the original settings.\n\nHowever, it is more difficult to concoct and simulate a state where it’s defined by the system. In Yippy, we require the user to provide full access, which in Swift can be checked if we have it by calling <code>AXIsProcessTrusted()</code>. But I need to be able to test when this returns different values and I shouldn’t have to manually change the access of my computer as I run the tests, that just makes them flaky. So I wrote some wrapper functions, that can be mocked out when the app runs in a UI test. Now that’s all pretty simple but parts of Yippy actually probes this function waiting for a change and I need to be able to test that… That’s not quite as simple. The test needs to run without the access, then at a certain point in the test it needs to relinquish the access, and Yippy should act a certain way. This is not so simple, since the app code cannot be interacted with by the testing code (and rightfully so). So what do we do? Well, thankfully from all my experience with interacting with <code>NSPasteboards</code> I realised that I could create a custom pasteboard (not the system wide general pasteboard) to store the current value in; and this worked perfectly. Only the testing code writes to the pasteboard, writing <code>\"true\"</code> or <code>\"false\"</code> at any point in the test and the app reads the value of the pasteboard when it polls for access, implemented by the mock.\n\nThis worked so well, that I’ve done a similar mock for testing the physical key press method is called how and when it should be.\n\nUltimately, I’ve spent a fairly large amount of time wrangling with all this testing but it has been very worthwhile, as I’ve learnt a lot about the app, testing in Xcode, testing in general and writing UI tests, something I’d never done before.",
        "date": 1569828674,
        "author": "Matt Davidson"
    },
    {
        "id": 6,
        "title": "Using NSPasteboard to mock library functions for testing",
        "content": "It is sometimes necessary to mock out library functions for testing when we can't control the value of what is returned but we need to be able to. For example, (for non-Sandbox apps) we can check if the user has given us full control by calling <code>AXIsProcessTrusted()</code>. However, we may need to test our app <code>AXIsProcessTrusted()</code> when both <code>true</code> and <code>false</code> are returned. We may even need to test how our app works if this function starts to return a different value whilst our app is running. This was the case for me in Yippy.\n\nNow it doesn't make much sense for our tests to require us to change the app's actual control during testing, so we need another way. This can be done simply with a mock. Let's see how:\n\nFirst, we need to stop calling <code>AXIsProcessTrusted()</code> directly in our app. We can do this by creating a helper class:\n<p class='Code-block'><span class='Code-keyword'>class</span> AccessControlHelper {\n\n    <span class='Code-keyword'>func</span> isControlGranted() -> <span class='Code-type'>Bool</span> {\n        <span class='Code-keyword'>return</span> <span class='Code-type'>AXIsProcessTrusted</span>()\n    }\n}</p>By some form of <a href='https://www.swiftbysundell.com/articles/different-flavors-of-dependency-injection-in-swift/' target='_blank'>dependency injection</a> <code>AccessControlHelper</code> should be injected into the app globally. Next we create our mock data source for whether the app has been granted full control or not by using a globally accessable <code>NSPasteboard</code>:\n<p class='Code-block'><span class='Code-keyword'>import</span> Cocoa\n\n<span class='Code-keyword'>struct</span> AccessControlMock {\n\n    <span class='Code-keyword'>static let</span> pasteboard = <span class='Code-type'>NSPasteboard</span>(name: <span class='Code-type'>NSPasteboard</span>.<span class='Code-type'>Name</span>(rawValue: <span class='Code-string'>\"Yippy.UITesting.AccessControl\"</span>))\n    \n    <span class='Code-keyword'>static func</span> setControlGranted(_ access: <span class='Code-type'>Bool</span>) {\n        <span class='Code-type'>pasteboard</span>.<span class='Code-type'>declareTypes</span>([.<span class='Code-type'>string</span>], owner: <span class='Code-keyword'>nil</span>)\n        <span class='Code-keyword'>let</span> str = access ? <span class='Code-string'>\"true\"</span> : <span class='Code-string'>\"false\"</span>\n        <span class='Code-type'>pasteboard</span>.<span class='Code-type'>setString</span>(str, forType: .<span class='Code-type'>string</span>)\n    }\n    \n    <span class='Code-keyword'>static func</span> isControlGranted() -> <span class='Code-type'>Bool</span> {\n        <span class='Code-keyword'>return</span> <span class='Code-type'>pasteboard</span>.<span class='Code-type'>string</span>(forType: .<span class='Code-type'>string</span>) == <span class='Code-string'>\"true\"</span>\n}</p>Now when a testing instance of our app is running we can inject the following <code>AccessControlHelperMock</code> in place of <code>AccessControlHelper</code>:<p class='Code-block'><span class='Code-keyword'>class</span> AccessControlHelperMock: <span class='Code-keyword'>AccessControlHelper</span> {\n\n    <span class='Code-keyword'>func</span> isControlGranted() -> <span class='Code-type'>Bool</span> {\n        <span class='Code-keyword'>return</span> <span class='Code-type'>AccessControlMock</span>.<span class='Code-type'>isControlGranted()</span>()\n    }\n}</p>Now finally, in our tests we can 'control' the access control:<p class='Code-block'><span class='Code-comment'>// Start off without control</span>\n<span class='Code-type'>AccessControlMock</span>.<span class='Code-type'>setControlGranted</span>(<span class='Code-keyword'>false</span>)\n\n<span class='Code-comment'>// Prompt the user to provide control</span>\n...\n\n<span class='Code-comment'>// Simulate the user relinquishing control</span>\n<span class='Code-type'>AccessControlMock</span>.<span class='Code-type'>setControlGranted</span>(<span class='Code-keyword'>false</span>)</p>",
        "date": 1569828675,
        "author": "Matt Davidson"
    },
    {
        "id": 7,
        "title": "Refactoring and Enhancements to the YippyViewController",
        "content": "The Yippy window is the main functionality of the app so naturally a lot of the code in the app has some sort of impact on it. This can be quite scary and hard to manage as I grow the functionality of the app, so I decided to refactor the <code>YippyViewController</code> as much as possible so that the view directly reflects the model and doesn’t have any state of it’s own that can get lost and cause bugs, as well as organising it into more classes each with their own responsibility.\n\nI’m normally quite good at reorganising my code but there were a few issues that kept cropping up making it tough to find a good solution. The main motivation to organise the code cleanly is because <code>YippyViewController</code> handles so many different events from so many different places because there are a lot of events that change the Yippy view. Everything from frame size changes, new copied items, all the hotkey events that manipulate the view and the mouse actions that manipulate the view. To make this all clean I tried to make as many of the functions, functional as I could but not <code>static</code>, as it makes sense for them to need its <code>self</code>. The main focus was to avoid playing with the state all over the place because that’s where all the problems occur. State is obviously necessary to maintain the state of the application but if the state creeps into every function being read and manipulated then it becomes very difficult. It becomes very difficult why certain things may happen and it makes it very hard to make changes as it can affect so many other pieces of the code.\n\nThe two most important state objects that I have to maintain is the history list and the currently selected item (which can be <code>nil</code>). There are many different events that interact with theses two objects so I’ve tried to make the code as streamlined as possible. I have used <code>RxSwift</code> to create <code>BehaviourRelay</code> objects to wrap the <code>history</code> and <code>selected</code> objects. Then I simply subscribe to the changes. I then avoid accessing the state as much as possible, only receiving the values from the notifications to the subscriptions.\n\nI have already found this to be extremely worthwhile when implementing new functionality. I’ve now added the ability to paste any of the last ten items with a keyboard shortcut, delete items, clear all history and live update the view on new copies. All of this new functionality is now implemented in very few lines. For example, to clear all the history all that is needed is:<p class='Code-block'><span class='Code-type'>State</span>.<span class='Code-type'>main</span>.<span class='Code-type'>history</span>.<span class='Code-type'>accept</span>([])\n<span class='Code-type'>State</span>.<span class='Code-type'>main</span>.<span class='Code-type'>selected</span>.<span class='Code-type'>accept</span>(<span class='Code-keyword'>nil</span>)</p>This will handle everything that is required. Update the model, the view will update and the new (empty) history will be saved to <code>UserDefaults</code>.",
        "date": 1570400001,
        "author": "Matt Davidson"
    },
    {
        "id": 8,
        "title": "The Battle of the Menu Bar",
        "content": "After doing some testing I realised that the Yippy window did not translate well to all combinations of Menu bar visibility and dock hiding. So I looked into ways of making it work and after a lot of struggling I finally came up with a solution. First I tried to just make the window full screen width when horizontal and full height when vertical, set the window level to <code>.screensaver</code> and boom! Well not so fast, this was a good solution until I realised that blocking the menu bar is a bad idea, as it started to even block my own status bar item.\n\nOk, next solution. I couldn’t figure out a way to set the level of the window so that it floated above the dock but below the status item. So I decided to go back to the <code>.floating</code> level which sits behind the dock with a full window under the dock but doesn’t go any higher than the menu bar. I then used different padding calculated from the <code>NSScreen.main!.visibleFrame</code> for different panel positions inside the window so that there was never any of the items obscured by the dock. I thought this was a pretty good solution and looked pretty clean (better than adjusting the whole frame size) but it’s when I discovered the issue of the Menu. I discovered that the Menu of course disappeared when an app goes into full screen mode. So then for left, right and top panel positions there would be a gap between the top of the Yippy window and the top of the screen which is now useable. This obviously looked very weird. So it needed to be fixed.\n\nSo this meant that I would need to change the window frame size based on the visibility of the status bar. This led me to finding <p class='Code-block'><span class='Code-keyword'>func</span> <span class='Code-type'>NSMenu</span>.<span class='Code-type'>menuBarVisible</span>() -> <span class='Code-type'>Bool</span></p>\"This will be easy\" I thought. Well, no. It’s return value is only affected by the user’s setting in <code>System Preferences > General > Automatically hide and show the menu bar</code>. When it’s ticked it returns <code>false</code> and when it isn’t it returns <code>true</code>. This means that it’s actually no help with my problem as the I can’t update the window size when there’s a temporary change to the menu bar visibility (hovering over a disappearing menu bar and a menu bar disappearing when in full screen mode). Damn. I checked out <code>NSApp.mainMenu!.menuBarHeight</code> but it wasn’t any help either, likewise with <code>NSScreen.main!.visibleFrame</code>. None of them update, frustrating.\n\nNow I knew there had to be a solution because Apple’s notifications slide out window manages with the problem fine. After a bit of thinking and struggling I realised how they do it, they just have it full height with some padding at the top with a window level such that it is above the dock and below the status bar. Then when they hide and show as they please it can always display correctly. Then after discovering <code>kCGDockWindowLevel</code> and <code>kCGMainMenuWindowLevel</code> I figured I could just set the window level how I like:<p class='Code-block'><span class='Code-type'>Window</span>.<span class='Code-type'>Level</span>(rawValue: <span class='Code-type'>Int</span>(<span class='Code-type'>kCGMainMenuWindowLevel</span> - 1))</p>And more Swiftly:<p class='Code-block'><span class='Code-type'>NSWindow</span>.<span class='Code-type'>Level</span>(rawValue: <span class='Code-type'>NSWindow</span>.<span class='Code-type'>Level</span>.<span class='Code-type'>mainMenu</span>.<span class='Code-type'>rawValue</span> - 1))</p>Since there is a gap of 4 between the <code>rawValue</code> of the dock and main menu window levels, my Yippy window would fit nicely in between. This pretty much solved the issue after adding some top padding. The only issue is that unfortunately this reduces some vertical height as you also kind of need some padding below the top label so it doesn’t look too uneven when it’s all exposed.\n\nDone! I thought.\n\nBefore releasing I was just checking over some things when I realised that the panel in the top position was not being set under the menu bar. It was being pushed down. After looking into this I noticed that the frame I was passing to <p class='Code-block'><span class='Code-type'>window</span>.<span class='Code-type'>setFrame</span>(_ frameRect: <span class='Code-type'>NSRect</span>, display flag: <span class='Code-type'>Bool</span>)</p> was not being set, it was being modified... That led me to <p class='Code-block'><span class='Code-keyword'>func</span> <span class='Code-type'>constrainFrameRect</span>(_ frameRect: <span class='Code-type'>NSRect</span>, to screen: <span class='Code-type'>NSScreen</span>?) -> <span class='Code-type'>NSRect<span></p> a NSWindow method, which according to Apple \"<i>Modifies and returns a frame rectangle so that its top edge lies on a specific screen.</i>\" So by overriding this and just simply returning <code>frameRect</code> my problem was solved.\n\nPlease let this be the last issue I have with the Yippy window frame. 🙏🏻",
        "date": 1570407178,
        "author": "Matt Davidson"
    },
    {
        "id": 8,
        "title": "The Class Variable 😍",
        "content": "Today I discovered the usefullness of the class variable. I had a protocol with a static variable like so:<p class='Code-block'><span class='Code-keyword'>protocol</span> Example {\n\n    <span class='Code-keyword'>static var</span> identifier: <span class='Code-type'>String</span> { <span class='Code-keyword'>get</span> }\n}<p>Then I had a bunch of implementations of the protocol (which had other methods), and I wanted to subclass one of them but I couldn't because I implemented the protocol in the first class like this:<p class='Code-block'><span class='Code-keyword'>class</span> BadImplementationA: <span class='Code-type'>Example</span> {\n\n    <span class='Code-keyword'>static let </span>identifier = <span class='Code-string'>\"ExampleA\"</span>\n}</p>This wouldn't work because you can't override static variables or methods. The solution to this is using a <b>class</b> variable which is like a static variable in that it satisfies the protocol, is used like a static variable but it can be overriden. Perfect! The only thing is that it can't be a stored property so we have to make it a computed variable instead, like so:<p class='Code-block'><span class='Code-keyword'>class</span> GoodImplementationA: <span class='Code-type'>Example</span> {\n\n    <span class='Code-keyword'>class var </span>identifier: <span class='Code-keyword'>String</span>{\n        <span class='Code-keyword'>return</span> <span class='Code-string'>\"ExampleA\"</span>\n    }\n}</p>Then we can override it similarly:<p class='Code-block'><span class='Code-keyword'>class</span> GoodImplementationB: <span class='Code-type'>GoodImplementationA</span> {\n\n    <span class='Code-keyword'>override class var </span>identifier: <span class='Code-keyword'>String</span>{\n        <span class='Code-keyword'>return</span> <span class='Code-string'>\"ExampleB\"</span>\n    }\n}</p>This was really useful as I have a protocol for all my <code>NSCollectionViewItem</code>s which handles registering, sizing and setting up cells, which keeps the <b>data source</b> and <b>delegate</b> implementations a lot lighter.",
        "date": 1570948573,
        "author": "Matt Davidson"
    },
    {
        "id": 10,
        "title": "Settings up good dev and test environment",
        "content": "After working on Yippy for a while I realised that I needed some more environments. Firstly I wanted to be able to have the latest release of Yippy running on my laptop (so that I could take advantage of all my hard work 😊). This would mean that I needed another instance of Yippy running totally separately which couldn't interfere with any of the save settings or anything. This would mean I would need a new bundle identifier. I also decided that I now wanted a totally fresh version of the app for testing as well, and I didn't want to be able to accidently run the tests on my other versions of the app. So here's how I did it:\n\nFirst I opened up my Yippy project document and created 3 new configurations:<ul><li>A duplicate of Debug called Beta Debug</li><li>A duplicate of Release called Beta Release</li><li>A duplicate of Debug called XCTest</li></ul>This way I'll be able develop using <code>Beta Debug</code> and archive that if I like, and also test totally separately with <code>XCTest</code>.\n\nNext I needed to edit the <b>Build Settigngs</b> of my <b>Yippy</b> Target. I edited the <b>Product Bundle Identifier</b> for my new configurations, setting the bundle id for <code>Beta Debug</code> and <code>Beta Release</code> to <code>MatthewDavidson.YippyBeta</code> and the bundle id for <code>XCTest</code> to <code>MatthewDavidson.YippyXCTest</code>. This allows me to run totally separate instances of Yippy. But we can't do that yet, we need to create some new Schemes.\n\nTo manage the schemes I selected <b>Product > Schemes > Manage Schemes</b>. Then I made two duplicates of my original Yippy Scheme and called them <b>Yippy Beta</b> and <b>Yippy XCTest</b>. Now to configure them.\n\nTo configure the original Yippy scheme all I did was remove the <b>YippyTests</b> and <b>YippyUITests</b> build targets, so that the tests cannot be run on a configuration with the current release's bundle identifier.\n\nNext, to configure the Yippy Beta scheme I basically just changed all build configurations to the beta version, so changing all instances of <b>Debug</b> to <b>Beta Debug</b> and <b>Release</b> to <b>Beta Release</b>. Then like with the Yippy scheme I removed the testing build targets.\n\nFinally, for the Yippy XCTest scheme I did the opposite, I kept the testing targets but removed unticked all the non-testing columns: Analyze, Run, Profile, Archive. So, that the testing version can't be run normally or archived.\n\nNow, these new configurations won't work until I update my cocoa pods because it is not set up yet. First I needed to edit the Podfile, specifying the types of configurations like so:<p class='Code-block'>project <span class='Code-string'>'Yippy'</span>, {\n    <span class='Code-string'>'Debug'</span> => <span class='Code-keyword'>:debug</span>,\n    <span class='Code-string'>'Release'</span> => <span class='Code-keyword'>:release</span>,\n    <span class='Code-string'>'Beta Debug'</span> => <span class='Code-keyword'>:debug</span>,\n    <span class='Code-string'>'Beta Release'</span> => <span class='Code-keyword'>:release</span>,\n    <span class='Code-string'>'XCTest'</span> => <span class='Code-keyword'>:debug</span>\n}</p>Then do a <code>pod install</code> and it was good to go. If I don't make this Podfile modification, if I try to import the pods as testables in the tests it won't be able to.\n\nNow this got the basic idea setup but I did a few more things by editing the Yippy target <b>Build Settings</b>. First, I added some flags to the <b>Active Compilation Conditions</b> such <code>BETA</code> and <code>XCTEST</code> so that I set some things up at run time as like. I also set a different app icon for the beta configurations by editing the <b>Asset Catalog App Icon Set Name</b>. Then I change the <b>Product Name</b> of the beta configurations, but I couldn't change it for the xctest configuration, as then it would change the <b>Product Module Name</b> unless I overrid it (which I didn't want to do) and that would mean anywhere I did a <code>@testable import Yippy</code> in my unit tests I would have to change to the new product module name, which I didn't think seemed right.\n\nAnyway, that's pretty much what I did, hopefully this documentation will help the next time I want to set something up like this.",
        "date": 1571033706,
        "author": "Matt Davidson"
    }
]
